import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np
training_set = tf.keras.utils.image_dataset_from_directory(
    "./Banana_new/Training",
    labels="inferred",
    label_mode="categorical",
    class_names=None,
    color_mode="rgb",
    batch_size=20,
    image_size=(224,224),
    shuffle=True,
    seed=None,
    validation_split=None,
    subset=None,
    interpolation="bilinear",
    follow_links=False,
    crop_to_aspect_ratio=False
)
validation_set = tf.keras.utils.image_dataset_from_directory(
    "./Banana_new/Validation",
    labels="inferred",
    label_mode="categorical",
    class_names=None,
    color_mode="rgb",
    batch_size=20,
    image_size=(224,224),
    shuffle=True,
    seed=None,
    validation_split=None,
    subset=None,
    interpolation="bilinear",
    follow_links=False,
    crop_to_aspect_ratio=False
)

# Advanced model
# Define the input layer
input_layer = tf.keras.layers.Input(shape=(224,224,3))
# Add convolutional layers
x = tf.keras.layers.Conv2D(32,(3, 3), activation='relu')(input_layer)
x = tf.keras.layers.Conv2D(64,(3, 3), activation='relu')(x)
x = tf.keras.layers.MaxPool2D(pool_size=2, strides=2)(x)
# x = tf.keras.layers.Dropout(0.5)(x)
x = tf.keras.layers.Conv2D(64,(3, 3), activation='relu')(x)
x = tf.keras.layers.Conv2D(64,(3, 3), activation='relu')(x)
x = tf.keras.layers.MaxPool2D(pool_size=2, strides=2)(x)
# x = tf.keras.layers.Dropout(0.5)(x)
x = tf.keras.layers.Conv2D(64,(3, 3), activation='relu')(x)
x = tf.keras.layers.Conv2D(64,(3, 3), activation='relu')(x)
x = tf.keras.layers.MaxPool2D(pool_size=2, strides=2)(x)
x = tf.keras.layers.Dropout(0.5)(x)
# Flatten the output of the convolutional layers
x = tf.keras.layers.Flatten()(x)
# Add dense layers
x = tf.keras.layers.Dense(units=256, activation='relu')(x)
x = tf.keras.layers.Dense(units=128, activation='relu')(x)
# Add dropout layer to avoid overfitting
x = tf.keras.layers.Dropout(0.5)(x)
# Add output layer
output_layer = tf.keras.layers.Dense(units=2, activation='softmax')(x)

# Create the model
cnn = tf.keras.Model(inputs=input_layer, outputs=output_layer)
# Compile the model
cnn.compile(optimizer='adam', loss="categorical_crossentropy", metrics=['accuracy'])

cnn.summary()
history=cnn.fit(x=training_set,validation_data=validation_set,epochs=15)